#!/usr/bin/env ruby
# http://gist.github.com/gists/2998853/
# Forked from http://gist.github.com/gists/124242
require 'fileutils'
require 'slugize'

directory, quality = ARGV[0], ARGV[1]
abort "Usage: flac2mp3 FLACFILE [V2|V1|V0|320]\nDefault (and recommended) quality is V0." if directory.nil?

qualarg = case quality
    when "V0","V1","V2" then quality
    when "320" then "b 320"
    else "V0"
end

if ! File.directory?(directory)
    puts "#{directory} isn't a directory bailing out."
    exit 1
end

setup = false
paths = Hash.new
info = Hash.new
Dir.glob("#{directory}/*.flac").each do |filename|
    map = {"TITLE" => "--tt", "ARTIST" => "--ta", "ALBUM" => "--tl", "TRACKNUMBER" => "--tn", "GENRE" => "--tg", "DATE" => "--ty"}
    args = ""

    `metaflac --export-tags-to=- "#{filename}"`.each_line do |line|
        key, value = line.strip.split('=', 2)
        key.upcase!
        args << %Q{#{map[key]} "#{value.gsub('"', '\"')}" } if map[key]
        info[key.downcase] = value
    end

    basename = File.basename(filename, File.extname(filename))

    # Guess the name of the album from the first track and proceed to make directories.
    if ! setup
        ['MP3', 'FLAC', 'Ogg'].each do |format|
            paths[format.downcase] = "#{info['artist']} - #{info['album']} [#{format}]"
            FileUtils.mkdir paths[format.downcase]
        end

        setup = true
    end

    print "Converting #{info['title']}..."
    system %Q[flac -dfs "#{filename}" -o "#{basename}.wav"]
    FileUtils.cp "#{filename}", "#{paths['flac']}/#{basename}.flac"
    print "..."

    # MP3
    system %Q[lame --quiet -#{qualarg} #{args} "#{basename}.wav" "#{paths['mp3']}/#{basename}.mp3"]
    print "..."

    # Ogg Vorbis
    system %Q[oggenc -Q -q 5 -o "#{paths['ogg']}/#{basename}.ogg" "#{basename}.wav"]   
    print "..."

    FileUtils.rm "#{basename}.wav"

    puts "done"
end

print "Zipping up directories..."
paths.each do |format, path|
	zip = "#{info['artist']} #{info['album']} #{format}".slugize
	system %Q[zip -rq #{zip} "#{path}"]
	FileUtils.rm_r path
end
puts "done"


